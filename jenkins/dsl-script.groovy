import groovy.json.*

/* Define Jenkins Violations configuration */
public class DSLHelpers {
    public static void violations(out, job, typeName, minNum, maxNum, unstableNum, filenamePattern = null) {
        job.configure { project ->
            def violationsConfig = project / publishers / 'hudson.plugins.violations.ViolationsPublisher' / 'config'
          
            def typeConfigsNode = violationsConfig / typeConfigs
            def typeEntry = typeConfigsNode / entry
          	def limit = violationsConfig / limit(100)
          
            typeEntry / string(typeName)
            def typeConfig = typeEntry / 'hudson.plugins.violations.TypeConfig'
            typeConfig / type(typeName)
            typeConfig / min(minNum)
            typeConfig / max(maxNum)
            typeConfig / unstable(unstableNum)
            typeConfig / usePattern(filenamePattern ? "true" : "false")
            typeConfig / pattern(filenamePattern)
        }
    }
}


def reader = new java.io.FileReader("/home/marvin/full-svn-checkout/jenkins-jobs/seed-jobs-dsl.json")
def dslJobs = new JsonSlurper().parse(reader)
def svn_url = "http://svn.bc/svn/ossrep"

/* iterate on ITEMS key in the file: ossrep/jenkins-jobs/seed-jobs-dsl.json */
dslJobs.item.each {
  def package_root = it.source_code_management.package_root.replaceFirst( /.*${svn_url}\/(\w.*\/.*).*/, '$1' )
  def ansible_root = it.source_code_management.ansible_root.replaceFirst( /.*${svn_url}\/(\w.*\/.*).*/, '$1' )
  def project_name = it.project.name
  def project_svn_root = "${svn_url}/${package_root}"
  
  /* Configure job for each found PROJECT in the file */
  job("${project_name}-generated") {
    description("This job was generated by script: ${svn_url}/jenkins-jobs/dsl-script.groovy.\nAll manual changes will be overwritten.\nChange your job in: ${svn_url}/jenkins-jobs/seed-jobs-dsl.json\nOr check build steps in: ${svn_url}/jenkins-jobs/dsl-script.groovy")
    
    /* Listen for changes in the project SVN dir */
    scm {
      svn{
        location(project_svn_root) {
        	credentials("d1dc550e-c3eb-4cd1-a29b-1706986e3b5d")
        	}
         }
    }
    
    /* Repeat above step every 5 minutes */
    triggers {
        scm('H/5 * * * *')
    }
    
    /* Execute below shell commands when changes detected */
    steps {
        shell("cd /home/marvin/full-svn-checkout/${package_root}; /apps/jenkins/bin/python setup.py sdist;")
        shell("cd /home/marvin/full-svn-checkout/${package_root}; scp dist/\$(ls -t dist/ | head -1) pypi.bc:/home/marvin/pypi;")
        shell("cd /home/marvin/full-svn-checkout/${ansible_root}; /apps/jenkins/bin/ansible-playbook -i hosts_dev playbook.yml;")
      	shell("/apps/jenkins/bin/py.test --pep8 /home/marvin/full-svn-checkout/${package_root}/  --junitxml=pep8.out | tee pep8.out;")
    }
    
    /* Activate Chuck Norris plugin */
    configure { project ->
      project / publishers << 'hudson.plugins.chucknorris.CordellWalkerRecorder' { factGenerator() }
    }
	
    /* Configure PEP8 to show in violations */
    DSLHelpers.violations(out, delegate, "pep8", 10, 999, 999, "**/pep8.out") 
    
  } /* end of item.each */
} /* end of file */
